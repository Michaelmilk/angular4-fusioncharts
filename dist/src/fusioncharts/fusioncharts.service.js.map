{"version":3,"sources":["../../../src/fusioncharts/fusioncharts.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,uBAAA,EAAwB,MAAO,6BAAA,CAA8B;AAGtE;IAGI,6BAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChE,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACpC,CAAC;IAED,sDAAwB,GAAxB;QAAA,iBAoBC;QAnBG,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC;QAAC,CAAC;QAC9C,IAAM,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC;QAC/C,IAAM,OAAO,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC;QAErD,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,EAAE,KAAK,YAAY,CAAC,CAAC,CAAC;YACxE,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,oEAAoE;YACpE,IAAI,CAAC,wBAAwB,GAAG,IAAI,EAAE,CAAC;QAC3C,CAAC;QAED,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;YACnB,MAAM,CAAC,KAAI,CAAC,wBAAwB,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,uDAAuD;QACvD,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,gBAAgB,GAAG,UAAU,CAAC;QACxE,CAAC;IACL,CAAC;IAED,yDAA2B,GAA3B;QACI,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC;IACzC,CAAC;IAED,qDAAuB,GAAvB,UAAwB,WAAgB;QACpC,MAAM,CAAC,IAAI,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC;IAC1D,CAAC;IASL,0BAAC;AAAD,CA5CA,AA4CC;;AAPM,8BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,kCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,uBAAuB,GAAG;CAChC,EAF6F,CAE7F,CAAC","file":"fusioncharts.service.js","sourceRoot":"","sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { FusionChartsCoreService } from './fusioncharts.core.service';\n\n\nexport class FusionChartsService {\n    private resolvedFusionChartsCore: any;\n\n    constructor(private fusionChartsCoreService: FusionChartsCoreService) {\n        this._resolveFusionChartsCore();\n    }\n\n    _resolveFusionChartsCore() {\n        if (this.resolvedFusionChartsCore) { return; }\n        const core = this.fusionChartsCoreService.core;\n        const modules = this.fusionChartsCoreService.modules;\n\n        if (core.getCurrentRenderer && core.getCurrentRenderer() === 'javascript') {\n            this.resolvedFusionChartsCore = core;\n        } else {\n            // Otherwise the core should be a factory that provides the fc core.\n            this.resolvedFusionChartsCore = core();\n        }\n\n        modules.forEach((module) => {\n            module(this.resolvedFusionChartsCore);\n        });\n\n        // Fix the black pie-chart rendering in Safari browser.\n        if (this.resolvedFusionChartsCore.options) {\n            this.resolvedFusionChartsCore.options.SVGDefinitionURL = 'absolute';\n        }\n    }\n\n    getResolvedFusionChartsCore() {\n        return this.resolvedFusionChartsCore;\n    }\n\n    newFusionChartsInstance(chartConfig: any) {\n        return new this.resolvedFusionChartsCore(chartConfig);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FusionChartsCoreService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}